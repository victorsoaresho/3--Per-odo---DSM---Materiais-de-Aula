// Exibe todos os bancos de dados já existentes
show dbs;

// Selecionando um novo banco de dados
// (Se não existir, será criado em memória e passará a existir // em disco quando algo for efetivamente inserido nele)
use estoque;

// Exibindo as coleções do banco de dados ativo 
show collections; 

// Primeira inserção
db.produtos.insertOne({
	nome: "Vassoura de piaçava",
	preco: 31.77,
	categoria: "Limpeza"
});

// Segunda inserção
db.produtos.insertOne({
	nome: "Café",
	marca: "Dubom",
	quantidade: 500,
	unidade: "g",
	preco: 22.38,
	categoria: "Alimentos e bebidas",
	estoque: 52
});

// Terceira inserção
db.produtos.insertOne({
	nome_oficial: "República Francesa",
	nome_comum: "França",
	capital: "Paris",
	continente: "Europa",
	chefe_estado: "Emanuel Macron",
	lingua_oficial: "Francês"	
});

// Exibindo os produtos cadastrados
db.produtos.find();

// Exibindo apenas o produto onde o nome é igual a café
db.produtos.find({nome: "Café"});

// Exibindo apenas o produto onde o nome é igual a café (case INTENSIVE)
db.produtos.find({nome: /^café$/i });

// Inserindo um produto com subdocumento
db.produtos.insertOne({
	nome: "Biscoito",
	marca: "Crocantão",
	quantidade: 200,
	unidade: "g",
	preco: 8.19,
	categoria: "Alimentos e bebidas",
	estoque: 100,
	fornecedor: {
	nome: "Indústria de Alimentos Bacana S/A",
	CNPJ: "01.234.567/0001-89",
	email: "contato@bacana.ind.br",
	representante: "Astolfo Alvarenga"
}
});

// Inserindo um outro produto, com dois subdocumentos
db.produtos.insertOne({
	nome: "Doce de leite",
	marca: "Mineirin",
	preco: 17.65,
	fornecedor: {
	nome: "Indústria de Alimentos Bacana S/A",
	CNPJ: "01.234.567/0001-89",
	email: "contato@bacana.ind.br",
	representante: "Astolfo Alvarenga",
	informacao_nutricional: {
	acucares_g: 75,
	gordura_saturada: 12,
	proteína: 13
	
}
	}
});

// Exibindo os produtos em ordem alfabética de nome (1 == ordem crescente) 
db.produtos.find().sort({ nome: 1});

// // Exibindo os produtos em ordem alfabética de nome (-1 == ordem decrescente) 
db.produtos.find().sort({ nome: -1});

// Listando apenas produtos que NÃO TÊM o campo "categoria"
db.produtos.find({ categoria: { $exists: false } });

// Listando apenas produtos cujo fornecedor tem o campo "email"
db.produtos.find({ "fornecedor.email": { $exists: true} });

// Procurando o produto "Café" pelo seu _id e alterando o valor

// de campos já existentes
db.produtos.updateOne(
	{ _id: ObjectId('66c3cd1cfb179a4a05127651') }, // Aqui cada um tem o seu
	{
		$set: {
			marca: "Torra Premium",
			preco: 40.27
		}
	}
);

// Atualizando um campo para exibir algo que não existia anteriormente
db.produtos.updateOne(
{nome: "Paçoca"}, $set: {categoria: "Alimentos e bebidas);

// Exibindo o produto paçoca, mostrando apenas os campos 'nome', 'preco' e 'categoria
db.produtos.findOne({nome: "Paçoca"}, {nome: 1, preco: 1, categoria: 1};

// Repetindo a consulta acima, trazendo os produtos paçoca e café
db.produtos.findOne({nome: "Paçoca"}, {nome: 1, preco: 1, categoria: 1};

// Aumentando o preço do doce de leite em 2,60
// $inc: Incrementar
db.produtos.findOne({nome: "Paçoca"}, {nome: 1, preco: 1, categoria: 1};

// Aumentando em 10% todos os produtos que tenham o campo preço 
// $mul: Multiplicar
db.produtos.findOne({nome: "Paçoca"}, {nome: 1, preco: 1, categoria: 1};

// Excluindo a intrusa republica francesa
db.produtos.deleteOne({nome oficial: "República Francesa});

// Listando todos os produtos que custam mais de R$20,00
// $gt: greater than (Maior que)
// $gte: greater than or equal to (Maior ou igual que)
// $lt: lesser than (Menor que)
// $lte: lesser than or equal to (menor ou igual que)
db.produtos.find({preco: {$gt: 20}});

    